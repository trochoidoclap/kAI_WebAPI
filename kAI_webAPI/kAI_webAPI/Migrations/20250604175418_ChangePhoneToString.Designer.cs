// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using kAI_webAPI.Data;

#nullable disable

namespace kAI_webAPI.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250604175418_ChangePhoneToString")]
    partial class ChangePhoneToString
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("kAI_webAPI.Models.Question.Question", b =>
                {
                    b.Property<int>("Id_question")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id_question");

                    b.HasIndex("Type");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("kAI_webAPI.Models.Question.Questions_type", b =>
                {
                    b.Property<int>("Id_questype")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Comment_vn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Questype")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id_questype");

                    b.ToTable("QuestionsTypes");
                });

            modelBuilder.Entity("kAI_webAPI.Models.Subjects.Subjects", b =>
                {
                    b.Property<int>("Id_subjects")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.Property<string>("subject_name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("subject");

                    b.HasKey("Id_subjects");

                    b.ToTable("subjects", (string)null);
                });

            modelBuilder.Entity("kAI_webAPI.Models.Subjects.SubjectsGroup", b =>
                {
                    b.Property<int>("Id_subgroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Subject1")
                        .HasColumnType("int");

                    b.Property<int>("Subject2")
                        .HasColumnType("int");

                    b.Property<int>("Subject3")
                        .HasColumnType("int");

                    b.Property<int?>("Subject4")
                        .HasColumnType("int");

                    b.Property<int?>("Subject5")
                        .HasColumnType("int");

                    b.HasKey("Id_subgroup");

                    b.HasIndex("Subject1");

                    b.HasIndex("Subject2");

                    b.HasIndex("Subject3");

                    b.HasIndex("Subject4");

                    b.HasIndex("Subject5");

                    b.ToTable("subjects_group", (string)null);
                });

            modelBuilder.Entity("kAI_webAPI.Models.User.User", b =>
                {
                    b.Property<int>("Id_users")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id_users");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("kAI_webAPI.Models.Question.Question", b =>
                {
                    b.HasOne("kAI_webAPI.Models.Question.Questions_type", "QuestionsType")
                        .WithMany("Questions")
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionsType");
                });

            modelBuilder.Entity("kAI_webAPI.Models.Subjects.SubjectsGroup", b =>
                {
                    b.HasOne("kAI_webAPI.Models.Subjects.Subjects", "Subject1Navigation")
                        .WithMany()
                        .HasForeignKey("Subject1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kAI_webAPI.Models.Subjects.Subjects", "Subject2Navigation")
                        .WithMany()
                        .HasForeignKey("Subject2")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kAI_webAPI.Models.Subjects.Subjects", "Subject3Navigation")
                        .WithMany()
                        .HasForeignKey("Subject3")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kAI_webAPI.Models.Subjects.Subjects", "Subject4Navigation")
                        .WithMany()
                        .HasForeignKey("Subject4")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("kAI_webAPI.Models.Subjects.Subjects", "Subject5Navigation")
                        .WithMany()
                        .HasForeignKey("Subject5")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Subject1Navigation");

                    b.Navigation("Subject2Navigation");

                    b.Navigation("Subject3Navigation");

                    b.Navigation("Subject4Navigation");

                    b.Navigation("Subject5Navigation");
                });

            modelBuilder.Entity("kAI_webAPI.Models.Question.Questions_type", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
